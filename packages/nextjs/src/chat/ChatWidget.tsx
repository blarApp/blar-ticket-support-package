'use client';

import { useState, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { MessageCircle, X, Send, Sparkles } from 'lucide-react';
import { Button } from '../ui/components/button';
import { Card } from '../ui/components/card';
import { Input } from '../ui/components/input';
import { cn } from '../ui/lib/utils';
import type { ChatMessage } from '../tour/types';
import { useTour } from '../tour/TourProvider';
import { mockChatAPI } from './mockChatAPI';

export interface ChatWidgetProps {
  position?: 'bottom-right' | 'bottom-left';
  className?: string;
}

export function ChatWidget({ position = 'bottom-right', className }: ChatWidgetProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [mounted, setMounted] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { startTour } = useTour();

  useEffect(() => {
    setMounted(true);
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: Date.now(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      // ==========================================
      // BACKEND API CALL
      // ==========================================
      // The backend receives the user's question and:
      // 1. Uses AI/LLM to understand what the user wants to do
      // 2. Analyzes the app structure to find relevant elements
      // 3. Dynamically generates a tour with steps to guide the user
      // 4. Returns the tour as a JSON response
      //
      // NO hardcoded tours exist in the frontend!
      // Everything is dynamically generated based on the user's question.
      // ==========================================

      // Using mock API for demo - replace with real API:
      // const response = await chatAPI({
      //   message: inputValue,
      //   projectId: config.projectId,
      //   currentUrl: window.location.href
      // });
      const response = await mockChatAPI(inputValue);

      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: response.message,
        tour: response.tour, // Dynamically generated by backend
        timestamp: Date.now(),
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Chat error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleStartTour = (tour: any) => {
    startTour(tour);
    // Optionally close chat when tour starts
    // setIsOpen(false);
  };

  const positionClasses = {
    'bottom-right': 'bottom-4 right-4',
    'bottom-left': 'bottom-4 left-4',
  };

  if (!mounted) return null;

  const content = (
    <div className={cn('fixed z-[9000]', positionClasses[position], className)}>
      {/* Chat Window */}
      {isOpen && (
        <Card className="mb-4 w-96 h-[500px] flex flex-col shadow-2xl border-2 bg-white dark:bg-gray-900 animate-in slide-in-from-bottom-5">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b">
            <div className="flex items-center gap-2">
              <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                <Sparkles className="h-5 w-5 text-blue-600 dark:text-blue-400" />
              </div>
              <div>
                <h3 className="font-semibold">Support Assistant</h3>
                <p className="text-xs text-gray-500">Ask me anything</p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="h-8 w-8 p-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.length === 0 && (
              <div className="text-center text-sm text-gray-500 mt-8">
                <Sparkles className="h-8 w-8 mx-auto mb-2 text-gray-400" />
                <p className="font-medium mb-3">Hi! I can help you navigate the app.</p>
                <div className="text-left max-w-xs mx-auto space-y-1.5">
                  <p className="text-xs font-semibold text-gray-700 dark:text-gray-300">Try asking:</p>
                  <p className="text-xs">• "How do I integrate Mailchimp?"</p>
                  <p className="text-xs">• "Show me the dashboard"</p>
                  <p className="text-xs">• "How do I create an order?"</p>
                  <p className="text-xs">• "How do I report an issue?"</p>
                </div>
              </div>
            )}

            {messages.map((message) => (
              <div
                key={message.id}
                className={cn(
                  'flex',
                  message.type === 'user' ? 'justify-end' : 'justify-start'
                )}
              >
                <div
                  className={cn(
                    'max-w-[80%] rounded-lg p-3 text-sm',
                    message.type === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100'
                  )}
                >
                  <p>{message.content}</p>

                  {/* Tour button */}
                  {message.tour && (
                    <Button
                      size="sm"
                      variant="outline"
                      className="mt-2 w-full bg-white dark:bg-gray-900"
                      onClick={() => handleStartTour(message.tour)}
                    >
                      <Sparkles className="h-4 w-4 mr-2" />
                      Start Tour
                    </Button>
                  )}
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t">
            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleSendMessage();
              }}
              className="flex gap-2"
            >
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Ask a question..."
                className="flex-1"
                disabled={isLoading}
              />
              <Button type="submit" size="sm" disabled={isLoading || !inputValue.trim()}>
                <Send className="h-4 w-4" />
              </Button>
            </form>
          </div>
        </Card>
      )}

      {/* Floating Button */}
      <Button
        onClick={() => setIsOpen(!isOpen)}
        className={cn(
          'h-14 w-14 rounded-full shadow-xl transition-transform hover:scale-110',
          isOpen && 'scale-0'
        )}
      >
        <MessageCircle className="h-6 w-6" />
      </Button>
    </div>
  );

  return createPortal(content, document.body);
}
