import type { ChatAssistantResponse } from '../tour/types';

/**
 * Real API interface for production use.
 *
 * Backend API Specification:
 * ---------------------------
 * Endpoint: POST /api/chat/ask
 *
 * Request Body:
 * {
 *   message: string;           // User's question
 *   currentUrl?: string;       // Current page URL for context
 *   sessionId?: string;        // Session tracking
 * }
 *
 * Response:
 * {
 *   message: string;           // Assistant's text response
 *   tour?: {
 *     id: string;              // Unique tour identifier (auto-generated by backend)
 *     steps: Array<{
 *       target: {
 *         tourId?: string;     // Optional: if element has data-tour-id
 *         selector?: string;   // CSS selector
 *         text?: string;       // Text content to find element
 *         index?: number;      // Index if multiple matches
 *       };
 *       title: string;         // Step title
 *       description: string;   // Step description
 *       position?: 'top' | 'bottom' | 'left' | 'right' | 'center';
 *     }>
 *   }
 * }
 *
 * Backend Implementation Notes:
 * -----------------------------
 * 1. Use LLM/AI to understand user intent from the question
 * 2. Analyze the app structure (options):
 *    - Store app DOM structure during onboarding
 *    - Crawl app pages periodically
 *    - Use developer-provided app map
 *    - Real-time DOM analysis (client sends snapshot)
 * 3. Generate steps dynamically based on:
 *    - User's question intent
 *    - Available elements in the app
 *    - Common UI patterns (buttons usually have text)
 * 4. Prioritize element targeting:
 *    - Use text content when possible (most reliable, no setup)
 *    - Fall back to CSS selectors for precision
 *    - data-tour-id only if developer added it
 */

export interface ChatAPIRequest {
  message: string;
  publishableKey: string;
  currentUrl?: string;
  sessionId?: string;
}

/**
 * Production chat API call
 * Replace the mockChatAPI with this in production
 */
export async function chatAPI(request: ChatAPIRequest): Promise<ChatAssistantResponse> {
  const response = await fetch('/api/chat/ask', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(request),
  });

  if (!response.ok) {
    throw new Error(`Chat API error: ${response.statusText}`);
  }

  return response.json();
}

/**
 * Example backend implementation (Node.js/Express):
 *
 * app.post('/api/chat/ask', async (req, res) => {
 *   const { message, publishableKey, currentUrl } = req.body;
 *
 *   // 1. Authenticate project
 *   const project = await getProject(publishableKey);
 *
 *   // 2. Use LLM to understand intent
 *   const intent = await analyzeIntent(message); // "user wants to create order"
 *
 *   // 3. Get app structure for this project
 *   const appStructure = await getAppStructure(publishableKey, currentUrl);
 *
 *   // 4. Generate tour steps using AI
 *   const tourSteps = await generateTourSteps({
 *     intent,
 *     appStructure,
 *     userMessage: message
 *   });
 *
 *   // 5. Return response with dynamically generated tour
 *   res.json({
 *     message: "I'll guide you through creating an order!",
 *     tour: {
 *       id: generateId(),
 *       steps: tourSteps // AI-generated based on app structure
 *     }
 *   });
 * });
 *
 * Example LLM Prompt for Step Generation:
 * ----------------------------------------
 * Given:
 * - User question: "How do I create an order?"
 * - App structure: {buttons: [{text: "Create Order", class: "btn-primary"}, ...]}
 *
 * Generate tour steps:
 * [
 *   {
 *     target: { text: "Quick Actions" },
 *     title: "Navigate to Quick Actions",
 *     description: "...",
 *     position: "top"
 *   },
 *   {
 *     target: { text: "Create Order" },
 *     title: "Click Create Order",
 *     description: "...",
 *     position: "top"
 *   }
 * ]
 */
